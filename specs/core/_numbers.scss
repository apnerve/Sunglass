@include describe("opposite") {
  @include it("should reverse the sign of numbers") {
    @include should( expect( _opposite(5) ), to( equal( -5 )));
    @include should( expect( _opposite(0) ), to( equal( 0 )));
    @include should( expect( _opposite(-5) ), to( equal( 5 )));
    @include should( expect( _opposite(1 3) ), to( equal( -1 -3 )));
    @include should( expect( _opposite(1 -3) ), to( equal( -1 3 )));
  }
}

@include describe("rem-to-px") {
  @include it("should convert rem to px") {
    @include should( expect( _rem-to-px(2) ), to( be( 24px )));
    @include should( expect( _rem-to-px(1.5) ), to( be( 18px )));
    @include should( expect( _rem-to-px(2rem) ), to( be( 24px )));
  }
  @include it("should return a number") {
    @include should( expect( _rem-to-px(2rem) ), to( have-type-of( number )));
  }
  @include it("should return a number in px") {
    @include should( expect( unit(_rem-to-px(2rem)) ), to( be( px )));
  }
}

@include describe("strip-unit") {
  @include it("should strip the unit") {
    @include should( expect( _strip-unit(2px) ), to( be( 2 )));
    @include should( expect( _strip-unit(1.5) ), to( be( 1.5 )));
    @include should( expect( _strip-unit(2%) ), to( be( 2 )));
  }
  @include it("should return a number") {
    @include should( expect( _strip-unit(2rem) ), to( have-type-of( number )));
  }
  @include it("should return a number without unit") {
    @include should( expect( unit(_strip-unit(2%)) ), to( be( "" )));
  }
}
